generator client {
  provider = "prisma-client-js"
}

model Tenant {
  id        String   @id @default(cuid())
  name      String
  subdomain String?  @unique
  plan      String   @default("basic")
  createdAt DateTime @default(now())

  // Email / SMTP
  smtpHost  String?
  smtpPort  Int?
  smtpUser  String?
  smtpPass  String?
  emailFrom String?
  emailTo   String?

  // AI Keys
  openaiKey String?

  // Google OAuth
  googleClientId     String?
  googleClientSecret String?
  googleRedirectUri  String?
  googleTokens       Json?

  // Branding / CSS
  brandColor   String?
  brandHover   String?
  botBg        String?
  botText      String?
  userBg       String?
  userText     String?
  glassBg      String?
  glassTop     String?
  blurPx       String?
  headerGlow   String?
  watermarkUrl String?
  fontFamily   String?

  // JSON blobs
  branding Json?
  settings Json?

  // Relationships (no onDelete here)
  convos    Conversation[]
  convLogs  ConversationLog[]
  events    Event[]
  leads     Lead[]
  metrics   Metric[]
  usage     Usage[]
  tags      TagDictionary[]
}

model Conversation {
  id        String    @id @default(cuid())
  tenantId  String
  sessionId String
  startedAt DateTime  @default(now())
  endedAt   DateTime?

  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@unique([tenantId, sessionId])
  @@index([tenantId])
}

model Message {
  id             String       @id @default(cuid())
  conversationId String
  role           String
  content        String
  tokensIn       Int          @default(0)
  tokensOut      Int          @default(0)
  createdAt      DateTime     @default(now())

  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)

  @@index([conversationId])
}

model Lead {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  email     String
  phone     String
  snippet   String
  tags      String[]
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Event {
  id        String   @id @default(cuid())
  tenantId  String
  type      String
  content   String
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Usage {
  id               String   @id @default(cuid())
  tenantId         String
  model            String
  promptTokens     Int
  completionTokens Int
  cachedTokens     Int
  cost             Float
  createdAt        DateTime @default(now())

  tenant           Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model Metric {
  id        String   @id @default(cuid())
  tenantId  String
  name      String
  value     Float
  createdAt DateTime @default(now())

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model ConversationLog {
  id        String   @id @default(cuid())
  tenantId  String
  sessionId String
  at        DateTime @default(now())
  data      Json

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
}

model TagDictionary {
  id        String   @id @default(cuid())
  tenantId  String
  category  String
  keywords  String[]

  tenant    Tenant   @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId])
  @@unique([tenantId, category])
}
